// Code generated by go-swagger; DO NOT EDIT.

package tunnels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListTunnelsReader is a Reader for the ListTunnels structure.
type ListTunnelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTunnelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTunnelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListTunnelsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListTunnelsOK creates a ListTunnelsOK with default headers values
func NewListTunnelsOK() *ListTunnelsOK {
	return &ListTunnelsOK{}
}

/*ListTunnelsOK handles this case with default header values.

A successful response.
*/
type ListTunnelsOK struct {
	Payload *ListTunnelsOKBody
}

func (o *ListTunnelsOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Tunnels/List][%d] listTunnelsOk  %+v", 200, o.Payload)
}

func (o *ListTunnelsOK) GetPayload() *ListTunnelsOKBody {
	return o.Payload
}

func (o *ListTunnelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListTunnelsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTunnelsDefault creates a ListTunnelsDefault with default headers values
func NewListTunnelsDefault(code int) *ListTunnelsDefault {
	return &ListTunnelsDefault{
		_statusCode: code,
	}
}

/*ListTunnelsDefault handles this case with default header values.

An unexpected error response.
*/
type ListTunnelsDefault struct {
	_statusCode int

	Payload *ListTunnelsDefaultBody
}

// Code gets the status code for the list tunnels default response
func (o *ListTunnelsDefault) Code() int {
	return o._statusCode
}

func (o *ListTunnelsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Tunnels/List][%d] ListTunnels default  %+v", o._statusCode, o.Payload)
}

func (o *ListTunnelsDefault) GetPayload() *ListTunnelsDefaultBody {
	return o.Payload
}

func (o *ListTunnelsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListTunnelsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListTunnelsBody list tunnels body
swagger:model ListTunnelsBody
*/
type ListTunnelsBody struct {

	// Return only Tunnels where one (or both) pmm-agent has this ID.
	AgentID string `json:"agent_id,omitempty"`
}

// Validate validates this list tunnels body
func (o *ListTunnelsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListTunnelsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTunnelsBody) UnmarshalBinary(b []byte) error {
	var res ListTunnelsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTunnelsDefaultBody list tunnels default body
swagger:model ListTunnelsDefaultBody
*/
type ListTunnelsDefaultBody struct {

	// error
	Error string `json:"error,omitempty"`

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*DetailsItems0 `json:"details"`
}

// Validate validates this list tunnels default body
func (o *ListTunnelsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTunnelsDefaultBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListTunnels default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTunnelsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTunnelsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListTunnelsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListTunnelsOKBody list tunnels OK body
swagger:model ListTunnelsOKBody
*/
type ListTunnelsOKBody struct {

	// tunnel
	Tunnel []*TunnelItems0 `json:"tunnel"`
}

// Validate validates this list tunnels OK body
func (o *ListTunnelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListTunnelsOKBody) validateTunnel(formats strfmt.Registry) error {

	if swag.IsZero(o.Tunnel) { // not required
		return nil
	}

	for i := 0; i < len(o.Tunnel); i++ {
		if swag.IsZero(o.Tunnel[i]) { // not required
			continue
		}

		if o.Tunnel[i] != nil {
			if err := o.Tunnel[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listTunnelsOk" + "." + "tunnel" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListTunnelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListTunnelsOKBody) UnmarshalBinary(b []byte) error {
	var res ListTunnelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TunnelItems0 Tunnel represents a single Tunnel configuration.
swagger:model TunnelItems0
*/
type TunnelItems0 struct {

	// Tunnel ID.
	TunnelID string `json:"tunnel_id,omitempty"`

	// Agent ID of the listening pmm-agent.
	ListenAgentID string `json:"listen_agent_id,omitempty"`

	// Listen port of the listening pmm-agent.
	ListenPort int64 `json:"listen_port,omitempty"`

	// Agent ID of the connecting pmm-agent.
	ConnectAgentID string `json:"connect_agent_id,omitempty"`

	// Target port of the connecting pmm-agent.
	ConnectPort int64 `json:"connect_port,omitempty"`
}

// Validate validates this tunnel items0
func (o *TunnelItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TunnelItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TunnelItems0) UnmarshalBinary(b []byte) error {
	var res TunnelItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
